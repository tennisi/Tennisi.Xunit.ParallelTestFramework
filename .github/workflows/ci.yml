name: CI

on:
  push:
    branches:
      - main
      - feature/*
    tags:
      - '*'
  pull_request:
    branches:
      - main
      - feature/*

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Ensure all tags and history are fetched

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.x'

      - name: Initialize .NET tool manifest
        run: dotnet new tool-manifest || true

      - name: Install minver-cli locally
        run: dotnet tool install minver-cli --version 5.0.0

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

      - name: Run tests
        run: dotnet test --no-build --verbosity normal

      - name: Get MinVer version
        id: get_version
        run: |
          $MINVER_VERSION = dotnet minver
          echo "MINVER_VERSION=$MINVER_VERSION" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
        shell: pwsh

      - name: Get latest tag
        id: get_tag
        run: |
          try {
            $TAG = git describe --tags --abbrev=0 2>$null
            if (-not $TAG) { $TAG = "" }
            Write-Output "Found tag: $TAG"
          } catch {
            $TAG = ""
            Write-Output "No tags found, setting TAG to an empty string."
          }
          echo "TAG=$TAG" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
        shell: pwsh

      - name: Determine version
        id: determine_version
        run: |
          if ($Env:GITHUB_REF -eq "refs/heads/main") {
            $VERSION = $Env:TAG
          } else {
            $VERSION = $Env:MINVER_VERSION
          }
          echo "VERSION=$VERSION" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
        shell: pwsh

      - name: Pack and Push
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
        run: |
          dotnet pack -c Release /p:Version=${{ env.VERSION }}
          dotnet nuget push **/*.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }}
        shell: pwsh
